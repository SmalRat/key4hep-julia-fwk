digraph G {
RootDecisionHub [blocking="", class=DecisionHub, ignoreFilterPassed="", invert="", modeOR="", requireObjects="", sequential="", shortCircuit="", type="", vetoObjects=""];
ProducerA [blocking=False, class=GaudiAlgorithm, ignoreFilterPassed="", invert="", modeOR="", requireObjects="", sequential="", shortCircuit="", type=MicroProducer, vetoObjects=""];
TransformerB [blocking=False, class=GaudiAlgorithm, ignoreFilterPassed="", invert="", modeOR="", requireObjects="", sequential="", shortCircuit="", type=MicroTransformer, vetoObjects=""];
Sequencer [blocking="", class=DecisionHub, ignoreFilterPassed=False, invert=False, modeOR=False, requireObjects="[  ]", sequential=False, shortCircuit=True, type=GaudiSequencer, vetoObjects="[  ]"];
TransformerC [blocking=False, class=GaudiAlgorithm, ignoreFilterPassed="", invert="", modeOR="", requireObjects="", sequential="", shortCircuit="", type=MicroTransformer, vetoObjects=""];
TransformerD [blocking=False, class=GaudiAlgorithm, ignoreFilterPassed="", invert="", modeOR="", requireObjects="", sequential="", shortCircuit="", type=MicroTransformer, vetoObjects=""];
InnerSequencer [blocking="", class=DecisionHub, ignoreFilterPassed=False, invert=False, modeOR=False, requireObjects="[  ]", sequential=False, shortCircuit=True, type=GaudiSequencer, vetoObjects="[  ]"];
TransformerE [blocking=False, class=GaudiAlgorithm, ignoreFilterPassed="", invert="", modeOR="", requireObjects="", sequential="", shortCircuit="", type=MicroTransformer, vetoObjects=""];
TransformerF [blocking=False, class=GaudiAlgorithm, ignoreFilterPassed="", invert="", modeOR="", requireObjects="", sequential="", shortCircuit="", type=MicroTransformer, vetoObjects=""];
TransformerG [blocking=False, class=GaudiAlgorithm, ignoreFilterPassed="", invert="", modeOR="", requireObjects="", sequential="", shortCircuit="", type=MicroTransformer, vetoObjects=""];
RootDecisionHub->ProducerA ;
RootDecisionHub->TransformerB ;
RootDecisionHub->Sequencer ;
RootDecisionHub->TransformerG ;
Sequencer->TransformerC ;
Sequencer->TransformerD ;
Sequencer->InnerSequencer ;
InnerSequencer->TransformerE ;
InnerSequencer->TransformerF ;
}
